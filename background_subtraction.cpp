#include <opencv2/highgui.hpp>
#include <opencv2/imgproc.hpp>
#include <opencv2/video.hpp> //Has Background Subtractor
#include <iostream>

int main(int argc, char **argv)
{
    cv::Mat vsrc, src, fgmask;
    cv::Ptr<cv::BackgroundSubtractor> bsop; //cv::BackgroundSubtractor *bsop; //Creating Background Subtractor Object Pointer OR do :- Ptr<BackgroundSubtractor> bsop;
                                    // BackgroundSubtractor is an abstract class. So, its object cannot be formed.

    int fps = 20;
    cv::VideoCapture vid(0);

    cv::namedWindow("Background Subtraction", cv::WINDOW_NORMAL);

    if (!vid.isOpened())
        return -1;

    while (vid.read(vsrc))
    {
        cv::cvtColor(vsrc, src, cv::COLOR_RGB2GRAY);
        //bsop->apply(src, fgmask, -1);

        cv::imshow("Background Subtraction", src);

        if (cv::waitKey(1000 / fps) >= 0)
            break;
    }
}

/*#include <opencv2/highgui.hpp>
#include <opencv2/imgproc.hpp>
#include <opencv2/videoio.hpp>
#include "opencv2/imgcodecs.hpp"

#include "opencv2/videoio.hpp"
#include <opencv2/highgui.hpp>
#include <opencv2/video.hpp>
#include <iostream>

using namespace cv;
using namespace std;

Mat frame; //current frame
Mat fgMaskMOG2; //fg mask fg mask generated by MOG2 method
//Ptr<BackgroundSubtractor> mog2; //MOG2 Background subtractor

BackgroundSubtractor* mog2;

int main(int argc, char **argv)
{
    cv::Mat frame, mask, gray;
    cv::namedWindow("Background Subtraction", cv::WINDOW_NORMAL);

    cv::VideoCapture vid(0);

    mog2 = createBackgroundSubtractorMOG2();

    if (vid.isOpened())
    {

        while (true)
        {

            if (vid.read(frame))
            {

                //imshow("frame", frame);

                cvtColor(frame, gray, cv::COLOR_RGB2GRAY);
                //imshow("gray", gray);
                mog2->apply(frame, fgMaskMOG2, -1);
                imshow("Background Subtraction", frame);

                if (cv::waitKey(30) >= 0)
                    break;
            }
        }
    }
    vid.release();
    return 0;
}
*/